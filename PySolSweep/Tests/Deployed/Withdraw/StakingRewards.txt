pragma solidity ^0.5.16;


contract StakingRewards is ReentrancyGuard {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;
    IERC20 public rewardsToken;
    IERC20 public stakingToken;
    uint256 public periodFinish = 0;
    uint256 public rewardRate = 0;
    uint256 public rewardsDuration;
    uint256 public lastUpdateTime;
    uint256 public rewardPerTokenStored;
    address public governance;

    string public breedFrom;
    string public centerId;
    address public centerAddress;

    mapping(address => uint256) public userRewardPerTokenPaid;
    mapping(address => uint256) public rewards;

    uint256 private _totalSupply;
    mapping(address => uint256) private _balances;


    constructor(address _governance, address _rewardsToken, address _stakingToken, string memory _breedFrom, string memory _centerId, address _centerAddress) public {
        rewardsToken = IERC20(_rewardsToken);
        stakingToken = IERC20(_stakingToken);
        governance = _governance;
        breedFrom = _breedFrom;
        centerId = _centerId;
        centerAddress = _centerAddress;
    }

    function withdraw(uint256 amount) public {
        require(amount > 0, "STAKINGREWARDS:CANNOT_WITHDRAW_ZERO");
        _totalSupply = _totalSupply.sub(amount);
        _balances[msg.sender] = _balances[msg.sender].sub(amount);
        stakingToken.safeTransfer(msg.sender, amount);
        emit Withdrawn(msg.sender, amount);
    }

}