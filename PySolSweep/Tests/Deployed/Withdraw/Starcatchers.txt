pragma solidity ^0.8.0;

contract Starcatchers is ERC721A, Ownable, ReentrancyGuard {
    using Address for address;
    using Strings for uint;

    uint128 public  _releaseTimestamp = 0;
    uint64  public  immutable _maxSupply = 10000;
    uint64  private immutable _maxMintAmountPerTx = 4;
    bool    private _treasuryMint;
    string  public  _baseTokenURI;

    address public constant xDev      = 0x9B54D1714f85a192723A36f1e8DE9E81dbcBBB1F;
    address public constant xTreasury = 0x370f75a63F438186DbfECfD27cD75a5023bEa737;
    address public constant xVault    = 0x02874867a6D48713D9cf275b7324B790E9C1f7Ee;

    struct Tier {
      uint128 wenOffset;
      uint64  priceWei;
      uint64  maxAllowed;
    }
    mapping(uint => Tier) public Tiers;
    mapping(address => uint) public addressStarlist;
    mapping(address => uint) public addressMintBalance;

    constructor(uint128 releaseTimestamp) {
      _releaseTimestamp = releaseTimestamp;

      Tiers[5] = Tier(0, 0.0888 ether, _maxMintAmountPerTx);
      Tiers[4] = Tier(0, 0.0888 ether, _maxMintAmountPerTx-1);
      Tiers[3] = Tier(0, 0.0999 ether, _maxMintAmountPerTx-1);
      Tiers[2] = Tier(86400, 0.0999 ether, _maxMintAmountPerTx-2);
      Tiers[1] = Tier(86400, 0.111 ether, _maxMintAmountPerTx-2);
      Tiers[11] = Tier(172800, 0.111 ether, _maxMintAmountPerTx-2);
      Tiers[12] = Tier(259200, 0.111 ether, _maxMintAmountPerTx-2);
      Tiers[0] = Tier(604800, 0.111 ether, _maxMintAmountPerTx-2);
    }

    function withdraw() public onlyOwner {
      uint total = address(this).balance;
      uint devCut = total * 5 / 100;
      uint vaultCut = total * 35 / 100;
      Address.sendValue(payable(xDev), devCut);
      Address.sendValue(payable(xVault), vaultCut);
      Address.sendValue(payable(xTreasury), address(this).balance);
    }
}