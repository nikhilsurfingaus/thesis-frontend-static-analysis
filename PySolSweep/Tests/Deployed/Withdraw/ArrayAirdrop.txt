pragma solidity ^0.8.0;

contract ArrayAirdrop is Pausable, Ownable, ReentrancyGuard {
    using SafeERC20 for IERC20;

    IERC20 public token;
    address public keeper;
    
    address[] public whitelist;
    mapping(address => bool) public claimed;
    mapping(address => uint) public amounts;

    bool public startedClaim = false;
    uint public limitCount = 100000;

    modifier checkKeeper {
        require (msg.sender == keeper || msg.sender == owner(), "!keeper");
        _;
    }

    constructor(address _token) {
        token = IERC20(_token);
        keeper = msg.sender;
    }

    function emergencyWithdraw(uint256 _amount) external {
        uint256 _bal = token.balanceOf(address(this));
        if (_amount > _bal) _amount = _bal;

        token.safeTransfer(msg.sender, _amount);
    }
}